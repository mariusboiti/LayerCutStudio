diff --git a/public/index.html b/public/index.html
--- a/public/index.html
+++ b/public/index.html
@@
-    function Preview({
+    function Preview({
       svgRef,
       pathD,
       textBBox,
       colors,
       pad,
       rounded,
-      fontSize,
-      setFontSize,
+      fontSizePx,
+      setFontSizePx,
       lineData,
       lineOffsets
     }) {
-      const dragRef   = useRef({ active: false, index: -1, sx: 0, sy: 0, ox: 0, oy: 0 });
-      const scaleRef  = useRef({ active: false, cx: 0, cy: 0, startDist: 1, startSize: fontSize });
+      const dragRef   = useRef({ active: false, index: -1, sx: 0, sy: 0, ox: 0, oy: 0 });
+      const scaleRef  = useRef({ active: false, cx: 0, cy: 0, startDist: 1, startSize: fontSizePx });
@@
-        let next = scaleRef.current.startSize * ratio;
+        let next = scaleRef.current.startSize * ratio;
         next = Math.max(20, Math.min(800, next));
-        setFontSize(Math.round(next));
-      }, [clientToSVG, setFontSize]);
+        setFontSizePx(Math.round(next));
+      }, [clientToSVG, setFontSizePx]);
@@
-      useEffect(() => {
+      useEffect(() => {
         const svg = svgRef.current;
         if (!svg) return;
         const onWheel = (e) => {
           if (!e.ctrlKey || !textBBox) return;
           e.preventDefault();
@@
-          let next = fontSize * factor;
+          let next = fontSizePx * factor;
           next = Math.max(20, Math.min(800, next));
-          setFontSize(Math.round(next));
+          setFontSizePx(Math.round(next));
           if (wheelTimerRef.current) clearTimeout(wheelTimerRef.current);
           wheelTimerRef.current = setTimeout(() => { anchorRef.current.active = false; }, 200);
         };
         svg.addEventListener('wheel', onWheel, { passive: false });
         return () => {
           svg.removeEventListener('wheel', onWheel);
           if (wheelTimerRef.current) clearTimeout(wheelTimerRef.current);
         };
-      }, [fontSize, textBBox, setFontSize]);
+      }, [fontSizePx, textBBox, setFontSizePx]);
@@
-      const midStroke  = Math.max(8,  Math.round(pad * 0.55));
+      const midStroke  = Math.max(8,  Math.round(pad * 0.55));
       const baseStroke = Math.max(12, pad);
@@
         preserveAspectRatio: "xMidYMid meet",
         className: "svg-preview",
         onMouseLeave: onUp
       }, [
@@
-        showHandle ? React.createElement("circle", {
+        showHandle ? React.createElement("circle", {
           key: "scale", cx: textBBox.maxX, cy: textBBox.maxY, r: 14,
           fill: base, stroke: "#ffffff", "stroke-width": 2,
           style: { cursor: "nwse-resize" }, onMouseDown: onScaleDown
         }) : null
       ]);
     }
@@
-      const [fontSize, setFontSize] = useState(140);
+      const [fontSizePx, setFontSizePx] = useState(140);
@@
-      const layout = useMemo(() => {
+      const layout = useMemo(() => {
         if (!font) return { d: "", bbox: null, lines: [] };
         const rawLines = [text, text2, text3].filter(Boolean);
         if (!rawLines.length) return { d: "", bbox: null, lines: [] };
 
         const spacing = Number.isFinite(lineSpacing) && lineSpacing > 0 ? lineSpacing : 1;
-        const totalHeight = fontSize + (rawLines.length - 1) * fontSize * spacing;
+        const totalHeight = fontSizePx + (rawLines.length - 1) * fontSizePx * spacing;
         const baselineTop = DESIGN_H / 2 - totalHeight / 2;
@@
-          const scale = fontSize / font.unitsPerEm;
+          const scale = fontSizePx / font.unitsPerEm;
           let width = 0, prev = null;
@@
-          const baseLine = baselineTop + fontSize + idx * fontSize * spacing;
+          const baseLine = baselineTop + fontSizePx + idx * fontSizePx * spacing;
           const off = offsets[idx] || { x: 0, y: 0 };
           const y = Math.round(baseLine) + off.y;
           const x = DESIGN_W / 2 - width / 2 + off.x;
 
-          const { d, bbox } = makePathFromText(font, value, fontSize, x, y, letterSpacing, glyphs);
+          const { d, bbox } = makePathFromText(font, value, fontSizePx, x, y, letterSpacing, glyphs);
@@
-      }, [font, text, text2, text3, fontSize, off1X, off1Y, off2X, off2Y, off3X, off3Y, lineSpacing, letterSpacing]);
+      }, [font, text, text2, text3, fontSizePx, off1X, off1Y, off2X, off2Y, off3X, off3Y, lineSpacing, letterSpacing]);
@@
-              fontSize,
-              setFontSize,
+              fontSizePx,
+              setFontSizePx,
               lineData,
               lineOffsets
             })
           )
         ])
       );
     }
@@
-          React.createElement("div", { className:"label", style:{marginTop:10} }, "Font size"),
-          React.createElement("input", { type:"number", value:fontSize, min:10, max:800, onInput:e=>setFontSize(+e.target.value||0) }),
+          React.createElement("div", { className:"label", style:{marginTop:10} }, "Font size"),
+          React.createElement("input", { type:"number", value:fontSizePx, min:10, max:800, onInput:e=>setFontSizePx(+e.target.value||0) }),
@@
-        const lineJoin = round ? "round" : "miter";
+        const lineJoin = round ? "round" : "miter";
         const lineCap = round ? "round" : "butt";
-        const midStroke = Math.max(8, Math.round(pad * 0.55));
-        const baseStroke = Math.max(12, pad);
+        const midStroke = Math.max(8, Math.round(pad * 0.55));
+        const baseStroke = Math.max(12, pad);